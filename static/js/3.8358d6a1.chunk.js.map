{"version":3,"sources":["../node_modules/uuid/dist/esm-browser/rng.js","../node_modules/uuid/dist/esm-browser/regex.js","../node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/uuid/dist/esm-browser/validate.js","../node_modules/uuid/dist/esm-browser/v4.js","src/charts/VizConstants.js","src/analytics/guid.js","src/charts/VegaViz.js","src/charts/ForceDirected/ForceDirectedMarks.js","src/charts/ForceDirected/ForceDirectedScales.js","src/charts/ForceDirected/ForceDirectedSignals.js","src/charts/ForceDirected/ForceDirectedVegaDataFormatter.js","src/charts/ForceDirected/ForceDirected.js"],"names":["getRandomValues","crypto","bind","msCrypto","rnds8","Uint8Array","rng","Error","validate","uuid","REGEX","test","byteToHex","i","push","toString","substr","stringify","arr","offset","arguments","length","undefined","toLowerCase","TypeError","v4","CONSTANTS","options","buf","rnds","random","Date","now","substring","delimiter","lowerCase","id","uuidv4","replace","toUpperCase","VegaViz","opts","this","_setOpts","data","isUnitTest","el","innerHTML","JSON","refresh","method","args","_opts","apply","value","optionOverrides","_numberFormatter","Object","assign","_callOptsHandler","ids","numberFormatter","metricFormatter","MetricFormatter","format","window","locale","l10n","ForceDirectedMarks","_","compact","getMarks","ForceDirectedScales","getColorScales","getScales","ForceDirectedSignals","getSignals","ForceDirectedVegaDataFormatter","formattedData","aggregateData","formatDataForVega","getComputedStylePropertyValue","property","getComputedStyle","document","body","getPropertyValue","trim","vega","vegaEmbed","console","log","ForceDirected","chartID","guid","setupChart","currentRenderId","cancelPendingRenders","newPendingRenderId","destroy","existing","querySelector","remove","vegaContainer","createElement","classList","add","shouldShowLoadingState","showLoadingState","appendChild","sleep","chartOptions","height","clientHeight","width","clientWidth","padding","ForceDirectedVegaFormatter","vegaSpec","getChartConfig","embedOpts","vegaView","isCancelledRender","view","finalize","container","lastRenderId","renderId","$schema","autosize","type","contains","background","fontFamilies","axisLabelColor","axisGridColor","vizBackgroundColor","signals","create","marks","scales","config","ChartFactory","registerChart"],"mappings":"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","file":"static/js/3.8358d6a1.chunk.js","sourcesContent":["// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n// find the complete implementation of crypto (msCrypto) on IE11.\nvar getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  if (!getRandomValues) {\n    throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n  }\n\n  return getRandomValues(rnds8);\n}","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;","export default {};\n\nlet CONSTANTS;\n\n// IMPORTANT NOTE: You can't call this until a chart is being rendered. Otherwise it will not give the body time to get the properties.\nexport function getConstants() {\n\tif (CONSTANTS) {\n\t\treturn CONSTANTS;\n\t}\n\tlet preferredFonts;\n\n\tCONSTANTS = {\n\t\tfontFamilies: `adobe-clean, Helvetica, Arial, sans-serif`,\n\t\taxisLabelColor: '#b2b2b2',\n\t\taxisGridColor: '#ebebeb',\n\t\tvizBackgroundColor: '#ffffff',\n\t};\n\n\tif (\n\t\ttypeof window !== 'undefined' &&\n\t\ttypeof window.document !== 'undefined' &&\n\t\ttypeof window.document.body !== 'undefined' &&\n\t\ttypeof getComputedStyle !== 'undefined'\n\t) {\n\t\t// returns a string similar to: \" adobe-clean, \"Noto Sans JP\", \"Noto Sans SC\", \"Noto Sans TC\", \"Noto Sans KR\"\n\t\tCONSTANTS.fontFamilies = `${getComputedStylePropertyValue('--aa-fonts')}, ${CONSTANTS.fontFamilies}`;\n\t\tCONSTANTS.axisLabelColor = getComputedStylePropertyValue('--aa-axis-label-color');\n\t\tCONSTANTS.axisGridColor = getComputedStylePropertyValue('--aa-axis-grid-color');\n\t\tCONSTANTS.vizBackgroundColor = getComputedStylePropertyValue('--aa-viz-bg');\n\t}\n\n\treturn CONSTANTS;\n}\n\nfunction getComputedStylePropertyValue(property) {\n\treturn getComputedStyle(document.body)\n\t\t.getPropertyValue(property)\n\t\t?.trim();\n}\n","/* eslint no-bitwise:0,no-nested-ternary:0,no-mixed-operators:0 */\n\nimport { v4 as uuidv4 } from 'uuid';\n\nlet dateNow =\n\tDate.now()\n\t\t.toString(16)\n\t\t.substring(5) + '-';\nlet count = 0;\n\nexport default {\n\tcreate: function({ delimiter = '-', lowerCase = false } = {}) {\n\t\tlet id = uuidv4(); // IE: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n\t\tif (delimiter !== '-') {\n\t\t\tid = id.replace(/-/g, delimiter);\n\t\t}\n\t\tif (!lowerCase) {\n\t\t\tid = id.toUpperCase();\n\t\t}\n\t\treturn id;\n\t},\n\tlight: function() {\n\t\tcount++;\n\t\t//Example: 775e67-15b\n\t\treturn dateNow + count.toString(16);\n\t},\n};\n","// Keep import below.\n// import { _, MetricFormatter } from '@analytics/core';\nimport { _, MetricFormatter } from './../analytics/core';\n\n// Params:\n// numberFormatter(number, {type:int* | time | percent | currency , precision:0 , abbreviate: false})\n\nexport default class VegaViz {\n  // Call this._setOpts\n\tconstructor(opts = {}) {\n\t\tthis._setOpts(opts);\n\t}\n\n\tasync draw(opts = {}) {\n    // Call this._setOpts\n\t\tthis._setOpts(opts);\n\t}\n\n  // If data is null, return false. If this is a unit test, return false.\n\tvalidate(data) {\n\t\tif (!data) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this.isUnitTest) {\n\t\t\tthis.el.innerHTML = JSON.stringify(data, null, 2);\n\t\t\treturn false; // For now we always return false if it is a unit test so we don't try to render via cloudviz.\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tget isUnitTest() {\n\t\treturn !!window.isUnitTest;\n\t}\n\n\t// Calls update with the same opts previously used. Used for resizing.\n\trefresh() {\n\t\t// VegaVizComponent currently takes care of resizing via React's lifecycle methods\n\t\t// this.update(this._opts);\n\t}\n\n\tonResize() {\n\t\tthis.refresh();\n\t}\n\n\tdestroy() {\n\t\t// cleanup.\n\t}\n\n\t_callOptsHandler(method, args) {\n\t\tif (!this._opts[method]) {\n\t\t\treturn;\n\t\t}\n\t\treturn this._opts[method].apply(null, args);\n\t}\n\n\tformatNumber(value, options = {}, optionOverrides = null) {\n\t\treturn this._numberFormatter(value, optionOverrides ? Object.assign({}, options, optionOverrides) : options);\n\t}\n\n\tonMouseOver(...args) {\n\t\treturn this._callOptsHandler('onMouseOver', args);\n\t}\n\n\tonMouseOut(...args) {\n\t\treturn this._callOptsHandler('onMouseOut', args);\n\t}\n\n\tonContextMenu(...args) {\n\t\treturn this._callOptsHandler('onContextMenu', args);\n\t}\n\n\tonRender(...args) {\n\t\treturn this._callOptsHandler('onRender', args);\n\t}\n\n\thighlightDataByIds(ids) {\n\t\t/* implemented in subclass */\n\t}\n\n\tunhighlightData() {\n\t\t/* implemented in subclass */\n\t}\n\n\tonError(...args) {\n\t\tif (this.el && !this.isUnitTest) {\n\t\t\tthis.el.innerHTML = '';\n\t\t}\n\t\treturn this._callOptsHandler('onError', args);\n\t}\n\n\tget locale() {\n\t\treturn this._opts.locale || 'en-US';\n\t}\n\n\tget l10nConfig() {\n\t\treturn this._opts.l10n || {};\n\t}\n\n\t/*\n\t * opts should have a data property defined like:\n\t * opts = {\n\t * \tdata: {\n\t * \t\tdata: [value, value, value]\n\t * \t}\n\t * }\n\t *\n\t * or\n\t * opts = {\n\t * \ty: [value, value, value],\n\t * \tx: [value, value, value]\n\t * }\n\t */\n\t// AN-232139 - Don't call this outside of VegaViz, there are other opts that get injected in VegaVizComponent\n\t_setOpts(opts = {}) {\n    // Element passed into the class.\n    this.el = opts.el;\n\n    // assign the number formatter passed into the function, or\n    // create a new MetricFormatter() otherwise.\n\t\tif (opts.numberFormatter) {\n\t\t\tthis._numberFormatter = opts.numberFormatter;\n\t\t} else if (!this._numberFormatter) {\n\t\t\tlet metricFormatter = new MetricFormatter();\n\t\t\tthis._numberFormatter = metricFormatter.format.bind(metricFormatter);\n\t\t}\n\t\tthis._opts = opts;\n\t}\n}\n","// Keep the import below.\n// import { _ } from '@analytics/core';\nimport { _ } from './../../analytics/core';\n\nexport default class ForceDirectedMarks {\n  getMarks(opts) {\n\t\tconst marks = _.compact([{\n      \"name\": \"nodes\",\n      \"type\": \"symbol\",\n      \"zindex\": 1,\n      \"from\": {\n        \"data\": \"node-data\"\n      },\n      \"on\": [{\n          \"trigger\": \"fix\",\n          \"modify\": \"node\",\n          \"values\": \"fix === true ? {fx: node.x, fy: node.y} : {fx: fix[0], fy: fix[1]}\"\n        },\n        {\n          \"trigger\": \"!fix\",\n          \"modify\": \"node\",\n          \"values\": \"{fx: null, fy: null}\"\n        }\n      ],\n\n      \"encode\": {\n        \"enter\": {\n          \"fill\": {\n            \"scale\": \"color\",\n            \"field\": \"group\"\n          },\n          \"stroke\": {\n            \"value\": \"white\"\n          }\n        },\n        \"update\": {\n          \"size\": {\n            \"signal\": \"2 * nodeRadius * nodeRadius\"\n          },\n          \"cursor\": {\n            \"value\": \"pointer\"\n          }\n        }\n      },\n\n      \"transform\": [{\n        \"type\": \"force\",\n        \"iterations\": 300,\n        \"restart\": {\n          \"signal\": \"restart\"\n        },\n        \"static\": {\n          \"signal\": \"static\"\n        },\n        \"signal\": \"force\",\n        \"forces\": [{\n            \"force\": \"center\",\n            \"x\": {\n              \"signal\": \"cx\"\n            },\n            \"y\": {\n              \"signal\": \"cy\"\n            }\n          },\n          {\n            \"force\": \"collide\",\n            \"radius\": {\n              \"signal\": \"nodeRadius\"\n            }\n          },\n          {\n            \"force\": \"nbody\",\n            \"strength\": {\n              \"signal\": \"nodeCharge\"\n            }\n          },\n          {\n            \"force\": \"link\",\n            \"links\": \"link-data\",\n            \"distance\": {\n              \"signal\": \"linkDistance\"\n            }\n          }\n        ]\n      }]\n    },\n    {\n      \"type\": \"path\",\n      \"from\": {\n        \"data\": \"link-data\"\n      },\n      \"interactive\": false,\n      \"encode\": {\n        \"update\": {\n          \"stroke\": {\n            \"value\": \"#ccc\"\n          },\n          \"strokeWidth\": {\n            \"value\": 0.5\n          }\n        }\n      },\n      \"transform\": [{\n        \"type\": \"linkpath\",\n        \"require\": {\n          \"signal\": \"force\"\n        },\n        \"shape\": \"line\",\n        \"sourceX\": \"datum.source.x\",\n        \"sourceY\": \"datum.source.y\",\n        \"targetX\": \"datum.target.x\",\n        \"targetY\": \"datum.target.y\"\n      }]\n    }\n  ]);\n\n\t\treturn marks;\n\t}\n\n  static create(opts) {\n\t\tconst instance = new this();\n\t\treturn instance.getMarks(opts);\n\t}\n}\n","// Keep the import below.\n// import { _ } from '@analytics/core';\nimport { _ } from './../../analytics/core';\n\nexport default class ForceDirectedScales {\n  getScales(opts) {\n\t\treturn _.compact([\n      this.getColorScales(opts),\n    ]);\n\t}\n\n  getColorScales(opts) {\n    return {\n      \"name\": \"color\",\n      \"type\": \"ordinal\",\n      \"domain\": {\n        \"data\": \"node-data\",\n        \"field\": \"group\"\n      },\n      \"range\": {\n        \"scheme\": \"category20c\"\n      }\n    }\n  }\n\n  static create(opts) {\n\t\tconst instance = new this();\n\t\treturn instance.getScales(opts);\n\t}\n}\n","// Keep the import below.\n// import { _ } from '@analytics/core';\nimport { _ } from './../../analytics/core';\n\nexport default class ForceDirectedSignals { \n  getSignals(opts) {\n    return _.compact([\n      {\n        \"name\": \"cx\",\n        \"update\": \"width / 2\"\n      },\n      {\n        \"name\": \"cy\",\n        \"update\": \"height / 2\"\n      },\n      {\n        \"name\": \"nodeRadius\",\n        \"value\": 8,\n        \"bind\": {\n          \"input\": \"range\",\n          \"min\": 1,\n          \"max\": 50,\n          \"step\": 1\n        }\n      },\n      {\n        \"name\": \"nodeCharge\",\n        \"value\": -30,\n        \"bind\": {\n          \"input\": \"range\",\n          \"min\": -100,\n          \"max\": 10,\n          \"step\": 1\n        }\n      },\n      {\n        \"name\": \"linkDistance\",\n        \"value\": 30,\n        \"bind\": {\n          \"input\": \"range\",\n          \"min\": 5,\n          \"max\": 100,\n          \"step\": 1\n        }\n      },\n      {\n        \"name\": \"static\",\n        \"value\": true,\n        \"bind\": {\n          \"input\": \"checkbox\"\n        }\n      },\n      {\n        \"description\": \"State variable for active node fix status.\",\n        \"name\": \"fix\",\n        \"value\": false,\n        \"on\": [{\n            \"events\": \"symbol:mouseout[!event.buttons], window:mouseup\",\n            \"update\": \"false\"\n          },\n          {\n            \"events\": \"symbol:mouseover\",\n            \"update\": \"fix || true\"\n          },\n          {\n            \"events\": \"[symbol:mousedown, window:mouseup] > window:mousemove!\",\n            \"update\": \"xy()\",\n            \"force\": true\n          }\n        ]\n      },\n      {\n        \"description\": \"Graph node most recently interacted with.\",\n        \"name\": \"node\",\n        \"value\": null,\n        \"on\": [{\n          \"events\": \"symbol:mouseover\",\n          \"update\": \"fix === true ? item() : node\"\n        }]\n      },\n      {\n        \"description\": \"Flag to restart Force simulation upon data changes.\",\n        \"name\": \"restart\",\n        \"value\": false,\n        \"on\": [{\n          \"events\": {\n            \"signal\": \"fix\"\n          },\n          \"update\": \"fix && fix.length\"\n        }]\n      }\n    ]); \n  }\n\n  static create(opts) {\n\t\tconst instance = new this();\n\t\treturn instance.getSignals(opts);\n\t}\n}\n","export default class ForceDirectedVegaDataFormatter {\n  static format(opts) {\n    return new this().formatDataForVega(opts); \n  }\n\n  // TODO: Implement at a later time. \n  formatDataForVega(opts) { \n    const fakeFormattedData = opts.data; \n    const fakeAggregateData = {}; \n    return {formattedData: fakeFormattedData, aggregateData: fakeAggregateData}; \n  }\n}\n","// TODO: Update the below imports using the @analytics syntax.\n// TODO: Remove the .js at the end of the files later on...\nimport { _, MetricFormatter, isNumeric, moment, sleep } from './../../analytics/core';\nimport guid from './../../analytics/guid';\n\nimport ChartFactory from './../ChartFactory';\nimport VegaViz from '../VegaViz';\nimport vegaL10n from './../vegaL10n/vegaL10n';\nimport ForceDirectedMarks from './ForceDirectedMarks';\nimport ForceDirectedScales from './ForceDirectedScales';\nimport ForceDirectedSignals from './ForceDirectedSignals';\nimport ForceDirectedVegaFormatter from './ForceDirectedVegaDataFormatter'; \nimport { getConstants } from './../VizConstants';\n\nconst { vega, vegaEmbed } = window;\nconsole.log(\"VEGA!!!\");\nconsole.log(vega);\n/**\n * Parent class:\n * this.el - the current element storing the view.\n *\n *\n *\n *\n * Class Values:\n *\n * this.chartID - the id of the current chart.\n * this.lastRenderId - the id of the last desired render item.\n * this.vegaView - The current vega view for a Line Graph.\n * this.opts - The opts passed to setupChart. Should have a\n * form of this.opts - {\n *  dataSets: [\n *    data: [\n *      dateGranularity\n *    ]\n *  ],\n *  showLoadingState: function(vegaContainer), - should display a loading indicator on the new vegaContainer element based on the function passed in opts\n *  locale,\n *  shouldRenderSmallChart,\n *\n * }\n *\n *\n * this.setupChart(opts) - async:\n * - 1. assigns a new lastRenderId by calling this.cancelPendingRenders()\n * - 2. calls this.destroy() (class function for removing the previous view)\n * - 3. call this.validate(opts) (function in VegaViz) to make sure opts exists and it is not a unit test\n * - 4. Remove the actual element displayed on the screen: Remove the current .vega-container element shown on the screen.\n * - 5. Create a new div and add it to the 'vega-container' class.\n * - 6. Add the new div to the element (display it), showing a loading indicator if necessary.\n * - 7. Store everything necessary for a chart in a chartOptions object.\n * - 8. Pass the chartOptions to a LineVegaDataFormatter. This function returns formattedData and aggreggate data, which are used to update the chartOptions object.\n * - 9. Create a LineToolTip by passing the updated chartOptions.\n * - 10.\n *\n * this.validate() - returns false if this.dataSets does not exist.\n */\n\nexport default class ForceDirected extends VegaViz {\n  async draw(opts) {\n\t\tawait super.draw(opts);\n\t\tif (!this.chartID) {\n\t\t\tthis.chartID = guid.create();\n\t\t}\n     \n\t\tawait this.setupChart(opts);\n\t}\n\n  async setupChart(opts) {\n\t\t//the vegaEmbed call is async - cancel any previous renders that haven't finished\n\t\tconst currentRenderId = guid.create();\n\t\tthis.cancelPendingRenders({ newPendingRenderId: currentRenderId });\n\n\t\t// Destroy the last vega container so we can measure the appropriate chart dimensions from a clean slate\n\t\tthis.destroy();\n\n\t\tthis.opts = opts;\n\n    // Called in parent class. \n\t\tif (!this.validate(opts)) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet existing = this.el.querySelector('.vega-container');\n\t\tif (existing) {\n\t\t\texisting.remove();\n\t\t}\n\n\t\t//create the container\n\t\tconst vegaContainer = document.createElement('div');\n\t\tvegaContainer.classList.add('vega-container');\n\n\t\tif (this.shouldShowLoadingState(opts)) {\n\t\t\topts.showLoadingState(vegaContainer);\n\t\t\tthis.el.appendChild(vegaContainer);\n\t\t\t// set a timeout here to flush the dom changes we just made\n\t\t\t// if we don't, the thread will just keep plowing through and the spinner will never show\n\t\t\tawait sleep(500);\n\t\t} else {\n\t\t\tthis.el.appendChild(vegaContainer);\n\t\t}\n\n    // ADOBE: Handle localization here. \n  \n\t\tconst chartOptions = {\n\t\t\t...opts,\n\t\t\theight: this.el.clientHeight,\n\t\t\twidth: this.el.clientWidth,\n\t\t\tpadding: this.padding,\n\t\t\tchartID: this.chartID,\n\t\t};\n\n    //TODO: format the data for vega (right now it simply returns the data passed in). \n\t\tconst { formattedData, aggregateData } = ForceDirectedVegaFormatter.format(chartOptions);\n\t\tObject.assign(chartOptions, { formattedData, ...aggregateData });\n\n\t\t//TODO: create tooltip handler\n\t\t//const lineTooltip = new LineTooltip(chartOptions);\n\t\t//const tooltipCallback = lineTooltip.show.bind(lineTooltip);\n \n\t\t//TODO: create a expression for the instance so we can reference options and custom instance functions inside of vega\n\t\t//LineExpressionFunctions.registerChartInstance(vega, this.chartID, chartOptions);\n\n\t\t//TODO: embed the vega chart into the dom\n\t\tconst vegaSpec = this.getChartConfig(chartOptions);\n    //const embedOpts = { renderer: this.renderer, actions: false, tooltip: tooltipCallback };\n    const embedOpts = {}; \n\n\t\t// vegaEmbed will generate the canvas, and add the canvas to vegaContainer\n\t\t// it will also remove all children from vegaContainer beforehand (so it will remove the loading spinner we added)\n    // see here: https://github.com/vega/vega-embed/blob/940c44c1051ae2138cf00e05e2a8b05c1ece25bd/src/embed.ts#L296\n    console.log(\"About to call vega Embed!\");\n    console.log(\"Data!!!\"); \n    console.log(opts.data); \n    console.log(vegaSpec);\n\t\tconst vegaView = await vegaEmbed(vegaContainer, vegaSpec, embedOpts);\n\n\t\t// because the vegaEmbed func is async, finalize any renders we cancelled above\n\t\t// if not cancelled, set as the new this.vegaView\n\t\tif (this.isCancelledRender(currentRenderId)) {\n\t\t\tvegaView.view.finalize();\n\t\t\tvegaView.view.container().remove();\n\t\t} else {\n      this.vegaView = vegaView;\n    } \n\t}\n\n\tshouldShowLoadingState(opts) {\n\t\t//use a hueristic to decide to show a loading spinner - only show for big data sets\n\t\t//for example concurrent viewers panel can have 15000 data points\n\t\t//let totalDataPoints = (opts.dataSets?.length ?? 0) * (opts.dataSets?.[0]?.data?.length ?? 0);\n    //return totalDataPoints > 10000;\n\n    // TODO: DECIDE LATER ON WHAT CONDITIONS TO SHOW A LOADING INDICATOR.\n    return true;\n  }  \n  \n\t// since vegaEmbed is async, allow for cancelling pending renders\n\t// if two render calls come in, we want the last one in to be what renders on the page\n\t// imagine an example where call \"A\" comes in, then \"B\", but B finishes async work before A.  We want A to be cancelled so that B is what gets rendered on the page\n\tcancelPendingRenders({ newPendingRenderId }) {\n\t\tthis.lastRenderId = newPendingRenderId;\n  }\n\n\tisCancelledRender(renderId) {\n\t\treturn renderId !== this.lastRenderId;\n  }\n \n\tdestroy() {\n\t\tif (this.vegaView) {\n\t\t\tthis.vegaView.view.finalize();\n\t\t\tthis.vegaView.view.container().remove();\n    }\n  }\n\n  /* \n\tvalidate() {\n\t\t// An array of datasets is required\n\t\tif (!this.dataSets) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst representativeData = this.dataSets[0]?.data?.[0];\n\n\t\t// Check that the first element is time\n\t\t// This still allows an empty dataset to pass\n\t\tif (representativeData && !(representativeData.value('x') instanceof Date)) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn super.validate(this._opts.dataSets);\n  }\n  */ \n\n\tgetChartConfig(opts) {\n\t\tlet config = {\n      $schema: 'https://vega.github.io/schema/vega/v5.json',\n      // Fit within width/height, with width/height being the total.\n\t\t\tautosize: { type: 'fit', contains: 'padding' },\n\t\t\tpadding: opts.padding,\n\t\t\tbackground: getConstants().vizBackgroundColor,\n\t\t\twidth: opts.width,\n\t\t\theight: opts.height,\n\t\t\tdata: opts.formattedData,\n\t\t\tsignals: ForceDirectedSignals.create(opts),\n\t\t\tmarks: ForceDirectedMarks.create(opts),\n\t\t\tscales: ForceDirectedScales.create(opts),\n      config: {}\n\t\t};\n\n\t\treturn config;\n  } \n\n\tget padding() {\n    // Hardcoded value for now...\n    return 0;\n\t}\n\n  /* \n\tgetMaxDataSetLength() {\n\t\tif (!this.dataSets.length) {\n\t\t\treturn 0;\n\t\t}\n\t\tconst longestDataSet = _.max(this.dataSets, ds => ds.data.length);\n\t\treturn longestDataSet.data.length;\n\t}\n\n\n\tgetPrecision(input) {\n\t\tconst metricFormatter = new MetricFormatter();\n\t\treturn metricFormatter.getCurrentPrecision(input);\n\t}\n\n\tcontainsAnomalyData() {\n\t\treturn this.dataSets.some(ds => ds.data.some(d => d.value('upperConfidenceBound')));\n\t}\n\n\tget dataSets() {\n\t\treturn this.opts.dataSets;\n\t}\n\n\tget anomaliesEnabled() {\n\t\treturn this.opts.showAnomalies && this.containsAnomalyData();\n\t}\n\n\tget anomalyRescaleIsEnabled() {\n\t\treturn this.opts.allowAnomaliesToRescale && this.anomaliesEnabled;\n\t}\n\n\tget dualYAxisIsEnabled() {\n\t\treturn this.opts.dualYAxis && this.dataSets.length === 2;\n\t}\n\n\tget normalizedIsEnabled() {\n\t\treturn this.opts.normalized && this.dataSets.length >= 2;\n\t}\n\n\tget normalizationRequired() {\n\t\treturn this.normalizedIsEnabled || this.dualYAxisIsEnabled;\n\t}\n\n\tget showMaxMinLabels() {\n\t\treturn this.opts.showMax || this.opts.showMin;\n\t}\n\n\tget showNormalizedAxis() {\n\t\treturn this.normalizedIsEnabled;\n\t}\n\n\tget renderer() {\n\t\t//render differently depending where the chart will be rendered (svg for PDF, canvas for HTML)\n\t\t//canvas won't scale well in PDF as the user resizes the PDF.  SVG lets the PDF redraw certain nodes (eg text) so they look crisp\n\t\t//SVG adds a lot of dom nodes that will slow down a browser page, using canvas cuts down to just one dom node\n\t\treturn this.opts.serverRender ? 'svg' : 'canvas';\n\t}\n\n\thighlightDataByIds(ids = []) {\n\t\t// TODO: Needs to be implemented differently from CloudViz since we don't have the DOM to manipulate\n\t}\n  */\n}\n\nconsole.log(\"Registering chart...\"); \nChartFactory.registerChart(ForceDirected);\n"],"sourceRoot":""}